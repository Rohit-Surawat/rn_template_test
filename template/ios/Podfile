# # Resolve react_native_pods.rb with node to allow for hoisting
# require Pod::Executable.execute_command('node', ['-p',
#   'require.resolve(
#     "react-native/scripts/react_native_pods.rb",
#     {paths: [process.argv[1]]},
#   )', __dir__]).strip

# platform :ios, min_ios_version_supported
# prepare_react_native_project!

# linkage = ENV['USE_FRAMEWORKS']
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

# target 'ProjectForTemplate' do
#   config = use_native_modules!

#   use_react_native!(
#     :path => config[:reactNativePath],
#     # An absolute path to your application root.
#     :app_path => "#{Pod::Config.instance.installation_root}/.."
#   )

#   target 'ProjectForTemplateTests' do
#     inherit! :complete
#     # Pods for testing
#   end

#   post_install do |installer|
#     # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
#     react_native_post_install(
#       installer,
#       config[:reactNativePath],
#       :mac_catalyst_enabled => false,
#       # :ccache_enabled => true
#     )
#   end
# end
# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
#flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green

end
  use_frameworks! :linkage => :static
  $RNFirebaseAsStaticFramework = true


post_install do |installer|
  config = use_native_modules!
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    config[:reactNativePath],
    :mac_catalyst_enabled => false
  )
  # __apply_Xcode_12_5_M1_post_install_workaround(installer)
  
  # flipper_post_install(installer)
  ## Fix for XCode 12.5
## Fix for XCode 12.5, Xcode 13
# find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
# "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
# find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
#     "RCTBridgeModuleNameForClass(strongModule))", "RCTBridgeModuleNameForClass(Class(strongModule)))")

  installer.pods_project.targets.each do |target|
    if target.name == 'react-native-google-maps'
      target.build_configurations.each do |config|
        config.build_settings['CLANG_ENABLE_MODULES'] = 'No'
      end
    end
     if target.name == 'react-native-config'
       phase = target.project.new(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
       phase.shell_script = "cd ../../"\
       " && RNC_ROOT=./node_modules/react-native-config/"\
       " && export SYMROOT=$RNC_ROOT/ios/ReactNativeConfig"\
       " && ruby $RNC_ROOT/ios/ReactNativeConfig/BuildDotenvConfig.rb \"${SRC_ROOT}/../\" \"${SYMROOT}\""

       target.build_phases << phase
       target.build_phases.move(phase,0)
     end

  

    # rnfirebase = installer.pods_project.targets.find { |target| target.name == 'RNFirebase' }
    # rnfirebase.build_configurations.each do |config|
      # config.build_settings['HEADER_SEARCH_PATHS'] = '$(inherited) ${PODS_ROOT}/Headers/Public/**'
    # end
    installer.pods_project.build_configurations.each do |config|
      config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
    end
    if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      end
    end
  end

#  target 'NotificationServiceExtension' do
#      inherit! :search_paths
#  end
end
def common_pod
  
  config = use_native_modules!
  pod 'react-native-config/Extension', :path => '../node_modules/react-native-config'
  pod 'OneSignalXCFramework', '>= 5.0', '< 6.0'
  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    :hermes_enabled => false,
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    #:flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
end
target 'ProjectForTemplateTests' do
  inherit! :complete
  # Pods for testing
end
target 'ProjectForTemplate' do
  common_pod
end

# target 'ExCommDev' do
#   inherit! :complete
#   common_pod
# end

# target 'ExCommUat' do
#   common_pod
# end
#target 'OneSignalNotificationServiceExtension' do
 # pod 'OneSignalXCFramework', '>= 5.0', '< 6.0'
#end
